name: Build, Tag, and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package

      - name: Get current version
        id: get_version
        run: echo "CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Calculate new version
        id: new_version
        run: |
          echo "Current version: ${{ env.CURRENT_VERSION }}"
          if [[ "${{ env.CURRENT_VERSION }}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_patch=$((patch + 1))
            NEW_VERSION="$major.$minor.$new_patch"
            echo "New version: $NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "Current version is not a valid semver version"
            exit 1
          fi

      - name: Check if tag exists
        id: check_tag_exists
        run: |
          if git rev-parse "v${{ env.NEW_VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Calculate new version if tag exists
        if: env.TAG_EXISTS == 'true'
        id: recalculate_version
        run: |
          echo "Current version: ${{ env.CURRENT_VERSION }}"
          if [[ "${{ env.CURRENT_VERSION }}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_patch=$((patch + 2))
            NEW_VERSION="$major.$minor.$new_patch"
            echo "New recalculated version: $NEW_VERSION"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          else
            echo "Current version is not a valid semver version"
            exit 1
          fi

      - name: Create Git tag
        if: env.TAG_EXISTS == 'false'
        run: |
          git config --global user.email "info@scgis.org"
          git config --global user.name "SCGIS Wales"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release version ${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Create Git tag after recalculation
        if: env.TAG_EXISTS == 'true'
        run: |
          git config --global user.email "info@scgis.org"
          git config --global user.name "SCGIS Wales"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release version ${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.NEW_VERSION }}"
          release_name: "Release ${{ env.NEW_VERSION }}"
          body: "Release of version ${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_HUB_USERNAME }}/springboot-demo:${{ env.NEW_VERSION }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/springboot-demo:${{ env.NEW_VERSION }}
